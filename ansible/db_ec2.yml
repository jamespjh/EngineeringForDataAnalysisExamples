- name: configure our DB example
  hosts: localhost # This is where this task will run - not where the affected machines are
  tasks:
    - name: create key pair on aws using key_material obtained using 'file' lookup plugin
      #https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_key_module.html
      amazon.aws.ec2_key:
        region: eu-west-2
        name: ucgajhe_aws_db_keypair
        key_material: "{{ lookup('file', '/Users/jamespjh/.ssh/id_rsa.pub') }}"

    - name: get the data about vpcs
    # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_vpc_net_info_module.html
      amazon.aws.ec2_vpc_net_info:
        filters:
          "tag:Name": ARC-playpen
      register: vpcs 

    - name: get the data about subnets
      amazon.aws.ec2_vpc_subnet_info:
        filters:
          vpc-id: "{{vpcs.vpcs[0].id}}"
          "tag:Name": "playpen-public-eu-west-2a"
      register: subnets


    - name: create a security group
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_security_group_module.html
      amazon.aws.ec2_security_group:
        name: course_db_security_group
        description: course security group
        vpc_id: "{{vpcs.vpcs[0].id}}"
        region: eu-west-2
        rules:
          - proto: tcp
            ports: 5432
            cidr_ip: 38.242.0.0/16
            rule_desc: allow my IP on Postgres
          - proto: tcp
            ports: 22
            cidr_ip: 38.242.0.0/16
            rule_desc: allow my IP on SSH
      register: security_group      

    - name: create the instance
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_instance_module.html
      amazon.aws.ec2_instance:
        name: "ucgajhe-DB-instance"
        key_name: ucgajhe_aws_db_keypair
        vpc_subnet_id: "{{subnets.subnets[0].subnet_id}}"
        instance_type: "t2.large"
        security_group: course_db_security_group
        network:
          assign_public_ip: true
        image_id: ami-0f9bfd7d2738e70d5
        tags:
          Owner: ucgajhe
          Type: DB

    - name: Gather information instances
    # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_instance_info_module.html
      amazon.aws.ec2_instance_info:
        filters:
          "tag:Owner": ucgajhe
          "tag:Type": DB
          instance-state-name: running
      register: instance_info


- name: on the device, install postgres and configure it
  hosts: tag_Type_DB
  tasks:

  - name: Install yum packages
    ansible.builtin.dnf:
      name: "{{ packages }}"
    become: true
    vars:
      packages:
      - postgresql
      - postgresql-server
      - python
      - python-pip

  - name: install python bindings for Postgres there
    ansible.builtin.pip:
      name: psycopg2-binary
    become: true

  - name: "Find out if PostgreSQL is initialized"
    ansible.builtin.stat:
      path: "/var/lib/pgsql/data/pg_hba.conf"
    register: postgres_data
    become: true
  
  - name: initialise Postgresql
    ansible.builtin.shell: postgresql-setup initdb
    when: not postgres_data.stat.exists # Make this idempotent
    become: true

  - name: start Postgres
    ansible.builtin.service:
      name: postgresql
      enabled: yes
      state: started
    become: true

  - name: "Create db user"
    community.postgresql.postgresql_user:
      state: present
      name: "jamespjh" # This is postgres's own user
      password: "TeachingDataEngineeringInsecurely"
      role_attr_flags: CREATEDB
    become: yes
    become_user: postgres #This is the system user.

  - name: Set listening to all remote IPs
    become_user: root
    community.postgresql.postgresql_set: 
      name: listen_addresses
      value: 0.0.0.0 # Not very secure, do something different for real
    become: yes
    become_user: postgres
    notify: restart postgres #Or it won't see the change in config file

  - name: "Allow md5 connection for the db user"
  # https://docs.ansible.com/ansible/latest/collections/community/postgresql/postgresql_pg_hba_module.html#ansible-collections-community-postgresql-postgresql-pg-hba-module
    community.postgresql.postgresql_pg_hba:
      dest: "~/data/pg_hba.conf" #Â The homedir is /var/lib/pgsql
      contype: host
      databases: all
      address: all # Insecure, but we only enabled my IP on Security Group anyway
      method: md5 # Require a password
      users: jamespjh
      create: true
    become: yes
    become_user: postgres 
    notify: restart postgres #Or it won't see the change in config file

  handlers:
    - name: restart postgres
      ansible.builtin.service: 
        name: postgresql 
        state: restarted
      become: true

- name: on this local computer, connect to our new DB instance, and interact with it
  hosts: localhost
  tasks:
    - name: Connect to the primary we just made, and create a DB
      community.postgresql.postgresql_db:
        name: molecules
        login_host: "{{instance_info.instances[0].public_dns_name}}"
        login_password: TeachingDataEngineeringInsecurely
        login_user: jamespjh

    - name: Connect to the DB we just made, and create a simple table
      # E.g.  engine =  psycopg2.connect(database='postgres',user='jamespjh',
      # password='TeachingDataEngineeringInsecurely',host='exemplar-db.cvvluwyhowbt.eu-west-2.rds.amazonaws.com',port=5432)
      # https://galaxy.ansible.com/ui/repo/published/community/postgresql/content/module/postgresql_table/
      community.postgresql.postgresql_table:
        login_host: "{{instance_info.instances[0].public_dns_name}}"
        login_password: TeachingDataEngineeringInsecurely
        login_user: jamespjh
        name: molecule_elements
        db: molecules
        columns:
        - molecule text primary key
        - num int
        - element text

    - name: Connect to the DB we just made, and run a SQL insert query
      community.postgresql.postgresql_query:
        login_host: "{{instance_info.instances[0].public_dns_name}}"
        login_password: TeachingDataEngineeringInsecurely
        login_user: jamespjh
        db: molecules
        query: INSERT INTO molecule_elements (molecule, num, element) VALUES ('co2', 1, 'c')

    - name: Connect to the DB we just made, and run a SQL query
      community.postgresql.postgresql_query:
        login_host: "{{instance_info.instances[0].public_dns_name}}"
        login_password: TeachingDataEngineeringInsecurely
        login_user: jamespjh
        db: molecules
        query: SELECT * FROM molecule_elements
      register: result

    - name: Print the example
      ansible.builtin.debug:
        var: result           
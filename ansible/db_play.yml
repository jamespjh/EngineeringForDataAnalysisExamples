- name: configure our DB example
  hosts: localhost # This is where this task will run - not where the affected machines are
  tasks:

    - name: get the data about vpcs
    # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_vpc_net_info_module.html
      amazon.aws.ec2_vpc_net_info:
        filters:
          "tag:Name": ARC-playpen
      register: vpcs 

    - name: get the data about subnets
      amazon.aws.ec2_vpc_subnet_info:
        filters:
          vpc-id: "{{vpcs.vpcs[0].id}}"
          "tag:Access": Public
      register: subnets

    - name: create a security group
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/ec2_security_group_module.html
      amazon.aws.ec2_security_group:
        name: course_db_security_group
        description: course security group
        vpc_id: "{{vpcs.vpcs[0].id}}"
        region: eu-west-2
        rules:
          - proto: tcp
            ports: 5432
            cidr_ip: 38.242.0.0/16
            rule_desc: allow my IP on Postgres
      register: security_group      

    - name: Add a subnet group
      amazon.aws.rds_subnet_group:
        state: present
        name: course-db-subnet-group
        description: Course DB subnet group
        subnets: "{{subnets.subnets | map(attribute='subnet_id')}}"

    - name: Create a DB instance
      # https://docs.ansible.com/ansible/latest/collections/amazon/aws/rds_instance_module.html
      amazon.aws.rds_instance:
        id: exemplar-db
        state: present
        engine: postgres
        db_instance_class: db.t3.small #There's a set of isntance types to
                                        #use for relational databases
        allocated_storage: 128 #GiB
        storage_type: gp3
        # storage_throughput: 125 #mb/s - the default for smaller storage amo
        backup_retention_period: 1 #days
        port: 5432 #the usual port for Postgres
        username: jamespjh
        password: TeachingDataEngineeringInsecurely
        publicly_accessible: true
        vpc_security_group_ids: "{{security_group.group_id}}"
        subnet_group: course-db-subnet-group
        tags:
          Owner: ucgajhe
          Type: exemplar
      register: database

    - name: Connect to the instance we just made, and create a DB
      community.postgresql.postgresql_db:
        name: molecules
        login_host: "{{database.endpoint.address}}"
        login_password: TeachingDataEngineeringInsecurely
        login_user: jamespjh

    - name: Connect to the instance we just made, and create a simple table
      # E.g.  engine =  psycopg2.connect(database='postgres',user='jamespjh',
      # password='TeachingDataEngineeringInsecurely',host='exemplar-db.cvvluwyhowbt.eu-west-2.rds.amazonaws.com',port=5432)
      # https://galaxy.ansible.com/ui/repo/published/community/postgresql/content/module/postgresql_table/
      community.postgresql.postgresql_table:
        login_host: "{{database.endpoint.address}}"
        login_password: TeachingDataEngineeringInsecurely
        login_user: jamespjh
        name: molecule_elements
        db: molecules
        columns:
        - molecule text primary key
        - num int
        - element text

    - name: Connect to the instance we just made, and run a SQL query
      community.postgresql.postgresql_query:
        login_host: "{{database.endpoint.address}}"
        login_password: TeachingDataEngineeringInsecurely
        login_user: jamespjh
        db: molecules
        query: INSERT INTO molecule_elements (molecule, num, element) VALUES ('co2', 1, 'c')

    - name: Connect to the instance we just made, and run a SQL query
      community.postgresql.postgresql_query:
        login_host: "{{database.endpoint.address}}"
        login_password: TeachingDataEngineeringInsecurely
        login_user: jamespjh
        db: molecules
        query: SELECT * FROM molecule_elements
      register: result

    - name: Print the example
      ansible.builtin.debug:
        var: result           
